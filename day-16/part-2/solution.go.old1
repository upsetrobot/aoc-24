/**
 ******************************************************************************
 * Advent of Code 2024 - Day 16 Part 2
 *
 * Had to clean up and start again.
 *
 * file:        solution.go
 * brief:       Solution for Advent of Code challenge in GoLang.
 * author:      upsetrobot
 * date:        06 Jan 2025
 * copyright:   2025. All rights reserved.
 *
 ******************************************************************************
 */

package main


// Imports.

import (
	"fmt"
	"log"
	"math"
	"os"
	"strings"
)


// Types.
type Node struct {
    x int
    y int
    scoreFromSource int
    scoreFromEnd int
    distFromSource int
    distFromEnd int
    visited bool
    visitedEnd bool
    edgeList [] Edge
    onMainPath bool
    linksToSource [] *Node
    linksToEnd [] *Node
}

type Edge struct {
    a *Node
    b *Node
    scoreBetween int
    distBetween int
}


// Constants.
// None.


// Variables.

var count = 0


/**
 * Main function that finds solution to Advent of Code problem using the
 * data from the given input file.
 */
func main() {

    // Get filename.
    if len(os.Args) < 2 {
        fmt.Println("Add filename as argument")
        return
    }

    // Get filename.
    fileName := os.Args[1]

    file, err := os.ReadFile(fileName)
    if err != nil {
        log.Fatal("Failed to open file:", err)
    }

    // Process file.
    strLines := strings.Split(string(file), "\n")
    strLines = strLines[:len(strLines) - 1]

    // Make maze.
    var maze [][] byte
    
    for _, line := range strLines {
        maze = append(maze, []byte(line))
    }

    // Make node list.
    var end *Node
    var start *Node
    nodeList := make([] *Node, 0)

    for i, line := range maze {
        for j, pos := range line {
            switch pos {
                case 'S':
                    nodeList = append(nodeList, &Node{
                        j, 
                        i, 
                        0, 
                        math.MaxInt32, 
                        0, 
                        math.MaxInt32, 
                        false, 
                        false,
                        [] Edge{},
                        true,
                        [] *Node {},
                        [] *Node {},
                    })
                    start = nodeList[len(nodeList) - 1]
                    break

                case 'E':
                    nodeList = append(nodeList, &Node{
                        j, 
                        i, 
                        math.MaxInt32, 
                        0, 
                        math.MaxInt32, 
                        0, 
                        false, 
                        false,
                        [] Edge{},
                        true,
                        [] *Node {},
                        [] *Node {},
                    })
                    end = nodeList[len(nodeList) - 1]
                    break

                case '.':
                    left := maze[i][j - 1]
                    down := maze[i + 1][j]
                    up := maze[i - 1][j]
                    right := maze[i][j + 1]
                    leftB := false
                    downB := false
                    upB := false
                    rightB := false
                    num := 0

                    if left == '.' {
                        leftB = true
                        num++
                    }

                    if down == '.' {
                        downB = true
                        num++
                    }

                    if up == '.' {
                        upB = true
                        num++
                    }

                    if right == '.' {
                        rightB = true
                        num++
                    }

                    if num == 2 {
                        if !(leftB && rightB) && !(downB && upB) {
                            nodeList = append(nodeList, &Node{
                                j, 
                                i, 
                                math.MaxInt32, 
                                math.MaxInt32, 
                                math.MaxInt32, 
                                math.MaxInt32, 
                                false, 
                                false,
                                [] Edge{},
                                false,
                                [] *Node {},
                                [] *Node {},
                            })
                        }
                    } else if num > 2 {
                        nodeList = append(nodeList, &Node{
                            j, 
                            i, 
                            math.MaxInt32, 
                            math.MaxInt32, 
                            math.MaxInt32, 
                            math.MaxInt32, 
                            false, 
                            false,
                            [] Edge{},
                            false,
                            [] *Node {},
                            [] *Node {},
                            })
                    }
                    break

                // Does not matter.
                default:
                    break

            } // End switch.

        } // End for.

    } // End for.

    // Make edges.
    for i := 0; i < len(nodeList); i++ {
        srcX := nodeList[i].x
        srcY := nodeList[i].y

        for j := 0; j < len(nodeList); j++ {
            if i == j {
                continue
            }

            dstX := nodeList[j].x
            dstY := nodeList[j].y
            curX := srcX
            curY := srcY
            count := 0
            score := 0

            if srcX == dstX {
                if srcY > dstY {
                    for curY != dstY {
                        curY--
                        count++
                        char := maze[curY][curX]
                        
                        if char == '#' {
                            count = 0
                            break
                        }

                    }

                } else {
                    for curY != dstY {
                        curY++
                        count++
                        char := maze[curY][curX]
                        
                        if char == '#' {
                            count = 0
                            break
                        }
                    }

                }

            } else if srcY == dstY {
                if srcX > dstX {
                    for curX != dstX {
                        curX--
                        count++
                        char := maze[curY][curX]
                        
                        if char == '#' {
                            count = 0
                            break
                        }
                    }

                } else {
                    for curX != dstX {
                        curX++
                        count++
                        char := maze[curY][curX]
                        
                        if char == '#' {
                            count = 0
                            break
                        }
                    }
                }

            } // End if.

            if count > 0 {
                score = count + 1000
                nodeList[i].edgeList = append(
                    nodeList[i].edgeList, 
                    Edge {nodeList[i], nodeList[j], score, count},
                )
            }

        } // End for.

    } // End for.

    // Now run Dykstras.
    var curr *Node
    cycles := 0

    for {
        cycles++
        flag := true
        min := math.MaxInt32

        for i := 0; i < len(nodeList); i++ {
            if !nodeList[i].visited && nodeList[i].scoreFromSource < min {
                min = nodeList[i].scoreFromSource
                curr = nodeList[i]
                flag = false
            }
        }

        if flag {
            break
        }

        curr.visited = true

        for i := 0; i < len(curr.edgeList); i++ {
            score := curr.scoreFromSource + curr.edgeList[i].scoreBetween
            dist := curr.distFromSource + curr.edgeList[i].distBetween

            if !curr.edgeList[i].b.visited && 
                score < curr.edgeList[i].b.scoreFromSource {

                curr.edgeList[i].b.scoreFromSource = score
                curr.edgeList[i].b.distFromSource = dist
            }
        }

    } // End for.

    // Now run Dykstras again (from end to every node instead of from start).
    for {
        cycles++
        flag := true
        min := math.MaxInt32

        for i := 0; i < len(nodeList); i++ {
            if !nodeList[i].visitedEnd && nodeList[i].scoreFromEnd < min {
                min = nodeList[i].scoreFromEnd
                curr = nodeList[i]
                flag = false
            }
        }

        if flag {
            break
        }

        curr.visitedEnd = true

        for i := 0; i < len(curr.edgeList); i++ {
            score := curr.scoreFromEnd + curr.edgeList[i].scoreBetween
            dist := curr.distFromEnd + curr.edgeList[i].distBetween

            if !curr.edgeList[i].b.visitedEnd && 
                score < curr.edgeList[i].b.scoreFromEnd {

                curr.edgeList[i].b.scoreFromEnd = score
                curr.edgeList[i].b.distFromEnd = dist
            }
        }

    } // End for.

    // Make links for nodes to end.

    // Maybe this is the problem. What if two edges have same length. I was 
    // trying to avoid recursion in this case, but maybe both paths have to 
    // be explored or we need a different way to link back the path... like 
    // using the Dykstra values rather than edges... Well if they are equal, 
    // then both are valid right, and that second valid path should be 
    // accounted for when its paths are checked... I think. Yeah, the links 
    // should take care of that. Maybe if there are two nodes connected to 
    // current and I am only choosing one, ... yeah, that's the same thing.
    for i := 0; i < len(nodeList); i++ {
        curr = nodeList[i]

        // Links to source.
        for {
            nodeList[i].linksToSource = append(nodeList[i].linksToSource, curr)

            if curr == start {
                break
            }

            next := curr
            min := curr.scoreFromSource         // <<<<< Here is offender. 
                                                // Okay real paths have
                                                // shortest to end and shortest to src. 

            // Like a path maybe does not use a link to the shortest path to 
            // src if it makes path to end better.

            for j := 0; j < len(curr.edgeList); j++ {
                if curr.edgeList[j].b.scoreFromSource < min {
                    min = curr.edgeList[j].b.scoreFromSource
                    next = curr.edgeList[j].b
                }
            }

            curr = next
        }

        curr = nodeList[i]

        // Links to end.
        for {
            nodeList[i].linksToEnd = append(nodeList[i].linksToEnd, curr)

            if curr == end {
                break
            }

            next := curr
            min := curr.scoreFromEnd

            for j := 0; j < len(curr.edgeList); j++ {
                if curr.edgeList[j].b.scoreFromEnd < min {  // <<<< Should this be source??
                    min = curr.edgeList[j].b.scoreFromEnd
                    next = curr.edgeList[j].b
                }
            }

            curr = next
        }
    }

    // It would be nice to know how many shortest paths there are.
    pathCount := 0
    nodeCount := 0
    counter := byte(0)

    // Now draw all paths that are equal to the shortest path.
    for i := 0; i < len(nodeList); i++ {

        if nodeList[i].scoreFromSource + nodeList[i].scoreFromEnd ==
            end.scoreFromSource {

            // Fix opposite issue.
            // What is the link order again? We are starting with us and 
            // moving to source.
            // Wasn't the problem. With debugging, I think I found the bad path
            // which means I can get the right answer. But I want to figure out
            // why it is being drawn.
            //node := nodeList[i]

            //if node != start && node != end {
            //    if node.linksToSource[1].x == node.linksToEnd[1].x || 
            //        node.linksToSource[1].y == node.linksToEnd[1].y {

            //        continue
            //    }
            //}

            // ***********************
            // Okay, so, it works great. Just need to fix the case where the 
            // path to a node from start and the path to a node from end 
            // share more than one node.
            // ***********************
            //skip := 0

            //for j := 0; j < len(nodeList[i].linksToSource); j++ {
            //    for k := 0; k < len(nodeList[i].linksToEnd); k++ {
            //        if nodeList[i].linksToSource[j] == 
            //            nodeList[i].linksToEnd[k] {

            //            skip++ 
            //        }
            //    }
            //}

            //if skip > 1 {
            //    continue
            //}

            // ^^^ Okay, made sense, but that wasn't the problem...Hmmm...

            // *********************
            // Okay, I think I figured it out... probably not, but maybe. The 
            // one spot on my graph I dont like is on a node that may have 
            // a value to src in one direction and a value to dst in the 
            // exact OPPOSITE direction (I already fixed same direction). If 
            // that is true, they are not turning, but they are scored as if 
            // there was a turn there. I feel like the chances of that 
            // actually happening and being equal to lowest path should be 
            // crazy low or impossible since turns are so costly. But, it seems 
            // like the only explanation so far. You would think the turn 
            // would cancel out (start doesn't get a turn, but end does). Okay 
            // that has to be the problem. One point gets an extra turn and 
            // somehow just works. Maybe if we just subtract 1000. What will
            // that do? Or add 1000 maybe ^^^. Wow, looks almost the same.
            // Gives different score but looks exactly the same to me or really
            // close if < but not equal to +1000 and passes example tests.

            // Opposite directions add 1000... Okay, I need to add 1000 if the
            // joint is opposite directions. In other words, don't count them.
            // THAT HAS TO BE THE PROBLEM. Yes, let's fix that.

            // That was not the problem.
            // I think I FINALLLLLLLLLLy maybe figured it out. There is a case
            // where a node's distance to home and end are correct, but the
            // distance to home of the adjacent options may be less with their
            // distance to the end more. In other words, one of my back links
            // is going the wrong direction. They go the lowest distance to
            // source (probably should be lowest to end which sound like I just
            // did not switch that var during the copy to the second linking.)
            // Let's fix that.

            pathCount++     // Obviously more like path drawn count.
                            // I could fix that.
            nodeCount++

            // Draw path to start.
            //for j := len(nodeList[i].linksToSource) - 1; j > 0; j-- {
            //    curr := nodeList[i].linksToSource[j]
            //    next := nodeList[i].linksToSource[j - 1]

            curr = nodeList[i]

            // Which one did I come from.
            next := curr
            //min := curr.scoreFromSource

            //for _, edge := range curr.edgeList {
            //    if edge.b.scoreFromEnd + edge.b.scoreFromSource == end.scoreFromSource {
            //        if edge.b.scoreFromSource < min {
            //            next = edge.b
            //            min = edge.b.scoreFromSource
            //        }
            //    }
            //}

            //// Which one am I going to.
            //going := curr 
            //max := math.MaxInt32

            //for _, edge := range curr.edgeList {
            //    if edge.b.scoreFromEnd + edge.b.scoreFromSource == end.scoreFromSource {
            //        if edge.b.scoreFromSource > curr.scoreFromSource && edge.b.scoreFromSource < max {
            //            going = edge.b
            //            max = edge.b.scoreFromSource
            //        }
            //    }
            //}
            //
            //if next.x == going.x || next.y == going.y {
            //    continue
            //}

            // HERE IT IS: THE FIX!!!!.... for one problem that undos my fixes
            // for the other problems...sad.
            for {

                if curr == start {
                    break
                }
                
                for _, edge := range curr.edgeList {
                    if edge.b.scoreFromEnd + edge.b.scoreFromSource == end.scoreFromSource {
                        if edge.b.scoreFromSource < curr.scoreFromSource {
                            next = edge.b
                        }
                    }
                }

                x := curr.x
                y := curr.y
                dx := next.x
                dy := next.y

                if byte('A' + counter) > 'Z' {
                    counter = 0
                }

                if x == dx {
                    if y > dy {
                        for y >= dy {
                            maze[y][x] = 'A' + counter
                            //maze[y][x] = 'o'
                            y--
                        }

                    } else {
                        for y <= dy {
                            maze[y][x] = 'A' + counter
                            //maze[y][x] = 'o'
                            y++
                        }
                    }

                } else {
                    if x > dx {
                        for x >= dx {
                            maze[y][x] = 'A' + counter
                            //maze[y][x] = 'o'
                            x--
                        }

                    } else {
                        for x <= dx {
                            maze[y][x] = 'A' + counter
                            //maze[y][x] = 'o'
                            x++
                        }
                    }
                }

                curr = next

            } // End for.

            // Draw path to end.    // <-- Possible logic error if paths
                                    // overlap!
                                    // *** validated this - not the problem.
                                    // The problem, just a diff problem.
            
            // Says still wrong answer. I wish I knew if was too low.
            // Its definitely better now, I guess. Now, I probably not fixing 
            // my previous issues, since I am not using links anymore.

            curr = nodeList[i]

            // Which one did I come from.
            next = curr
            //min = curr.scoreFromSource

            //for _, edge := range curr.edgeList {
            //    if edge.b.scoreFromEnd + edge.b.scoreFromSource == end.scoreFromSource {
            //        if edge.b.scoreFromEnd < min {
            //            next = edge.b
            //            min = edge.b.scoreFromEnd
            //        }
            //    }
            //}

            //// Which one am I going to.
            //going = curr 
            //max = math.MaxInt32

            //for _, edge := range curr.edgeList {
            //    if edge.b.scoreFromEnd + edge.b.scoreFromSource == end.scoreFromSource {
            //        if edge.b.scoreFromEnd > curr.scoreFromEnd && edge.b.scoreFromEnd < max {
            //            going = edge.b
            //            max = edge.b.scoreFromEnd
            //        }
            //    }
            //}
            //
            //if next.x == going.x || next.y == going.y {
            //    continue
            //}

            for {

                if curr == end {
                    break
                }
                
                for _, edge := range curr.edgeList {
                    if edge.b.scoreFromEnd + edge.b.scoreFromSource == end.scoreFromSource {
                        if edge.b.scoreFromEnd < curr.scoreFromEnd {
                            next = edge.b
                        }
                    }
                }
                
                x := curr.x
                y := curr.y
                dx := next.x
                dy := next.y

                if x == dx {
                    if y > dy {
                        for y >= dy {
                            maze[y][x] = 'A' + counter
                            //maze[y][x] = 'o'
                            y--
                        }

                    } else {
                        for y <= dy {
                            maze[y][x] = 'A' + counter
                            //maze[y][x] = 'o'
                            y++
                        }
                    }

                } else {
                    if x > dx {
                        for x >= dx {
                            maze[y][x] = 'A' + counter
                            //maze[y][x] = 'o'
                            x--
                        }

                    } else {
                        for x <= dx {
                            maze[y][x] = 'A' + counter
                            //maze[y][x] = 'o'
                            x++
                        }
                    }
                }

                curr = next

            } // End for.

            counter++

        } // End if.

    } // End for.

    // Print maze and find solution.
    solution := 0

    for _, line := range maze {
        fmt.Println(string(line))

        for _, pos := range line {
            if pos == 'o' {
                solution++
            }
        }
    }
    fmt.Println()
    
    // Print solution.
    fmt.Println("Day 16 Part 2")
    fmt.Println("Filename:", fileName)
    fmt.Println()
    fmt.Println("Solution:", solution)
    fmt.Println("Cycles:", cycles)
    fmt.Println("Main Path Length:", end.distFromSource)
    fmt.Println("Main Path Score:", end.scoreFromSource)
    fmt.Println("Paths Drawn Count (Number of joins in all drawn paths):", pathCount)
    fmt.Println()

} // End main.



